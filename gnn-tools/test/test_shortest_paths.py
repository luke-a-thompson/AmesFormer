import gnn_tools


class TestShortestPathsGroup:
    def test_shortest_paths(self):
        edges = [
            (0, 1),
            (1, 0),
            (1, 2),
            (1, 3),
            (2, 1),
            (3, 1),
            (3, 4),
            (3, 18),
            (4, 3),
            (4, 5),
            (5, 4),
            (5, 6),
            (5, 16),
            (6, 5),
            (6, 7),
            (7, 6),
            (7, 8),
            (7, 9),
            (8, 7),
            (9, 7),
            (9, 10),
            (9, 14),
            (10, 9),
            (10, 11),
            (11, 10),
            (11, 12),
            (12, 11),
            (12, 13),
            (13, 12),
            (13, 14),
            (14, 9),
            (14, 13),
            (14, 15),
            (15, 14),
            (16, 5),
            (16, 17),
            (17, 16),
            (17, 18),
            (18, 3),
            (18, 17),
        ]
        node_paths, edge_paths = gnn_tools.shortest_paths(edges, 5)
        expected_node_paths = [
            [0, -1, -1, -1, -1],
            [0, 1, -1, -1, -1],
            [0, 1, 2, -1, -1],
            [0, 1, 3, -1, -1],
            [0, 1, 3, 4, -1],
            [0, 1, 3, 4, 5],
            [0, 1, 3, 4, 5],
            [0, 1, 3, 4, 5],
            [0, 1, 3, 4, 5],
            [0, 1, 3, 4, 5],
            [0, 1, 3, 4, 5],
            [0, 1, 3, 4, 5],
            [0, 1, 3, 4, 5],
            [0, 1, 3, 4, 5],
            [0, 1, 3, 4, 5],
            [0, 1, 3, 4, 5],
            [0, 1, 3, 18, 17],
            [0, 1, 3, 18, 17],
            [0, 1, 3, 18, -1],
        ]
        assert node_paths[0] == expected_node_paths

        expected_edge_paths = [
            [-1, -1, -1, -1, -1],
            [0, -1, -1, -1, -1],
            [0, 2, -1, -1, -1],
            [0, 3, -1, -1, -1],
            [0, 3, 6, -1, -1],
            [0, 3, 6, 9, -1],
            [0, 3, 6, 9, 11],
            [0, 3, 6, 9, 11],
            [0, 3, 6, 9, 11],
            [0, 3, 6, 9, 11],
            [0, 3, 6, 9, 11],
            [0, 3, 6, 9, 11],
            [0, 3, 6, 9, 11],
            [0, 3, 6, 9, 11],
            [0, 3, 6, 9, 11],
            [0, 3, 6, 9, 11],
            [0, 3, 7, 39, 36],
            [0, 3, 7, 39, -1],
            [0, 3, 7, -1, -1],
        ]

        assert edge_paths[0] == expected_edge_paths
